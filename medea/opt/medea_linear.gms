$title *medea* _ an economic model of the electricity system in Europe

$ontext
Abstract power system model *medea*, written by Sebastian Wehrle and Johannes Schmidt.
Data for concrete model instantiation is generated by the accompanying
python scripts /instantion/preprocess.py and /instantiation/instantiate.py

Full model code, data and licensing information provided at:
https://github.com/medea

For comments, suggestions, bug reporting and other correspondence please write to
sebastian.wehrle@boku.ac.at
$offtext

$onEoLCom
$EoLCom #

*# DEVELOPMENT:
*- re-check data for NTC
*- allow for investment in grid capacity

********************************************************************************
********** set declaration
********************************************************************************
sets
         f                               fuels
         l                               limits to feasible operating region
         prd                             products
         props                           technical properties of hydro storage plants
         r                               regions
         tec                             power plant technologies
         tec_chp(tec)                    subset of CHP technologies
         tec_hsp                         hydro storage technologies
         tec_itm                         renewable generation technologies
         t                               time - hours
         start_t(t)                      hour for initial values
         end_t(t)                        end time of iteration
;

alias(r,rr);

********************************************************************************
********** parameter declaration
********************************************************************************
parameters
         ANCIL_SERVICE_LVL(r)            generation level required for provision of ancillary services
         CONSUMPTION(r,t,prd)            hourly consumption of power and heat [GW]
         EFFICIENCY(tec,prd,f)           electrical efficiency of power plant [%]
         EMISSION_INTENSITY(f)              specific emission factor of each fuel [kt CO2 per GWh fuel]
         EXPORT_FLOWS(r,t)               exports to regions not modelled [GW]
         FEASIBLE_INPUT(tec,l,f)         fuel requirement for feasible output generation []
         FEASIBLE_OUTPUT(tec,l,prd)      feasible combinations of outputs []
         GEN_PROFILE(r,t,tec_itm)        generation profile of intermittent technologies
         HSP_PROPERTIES(r,tec_hsp,props) technical properties of hydro storage plants
         IMPORT_FLOWS(r,t)               imports from regions not modelled [GW]
         INSTALLED_CAP_ITM(r,tec_itm)    installed intermittent capacities [GW]
         INSTALLED_CAP_THERM(r,tec)      installed thermal capacities [GW]
         INVESTCOST_ITM(tec_itm)         annuity of investment in 1 GW intermittent technology
         INVESTCOST_THERMAL(tec)         annuity of investment in 1 GW thermal generation technology
         MAX_EMISSIONS(r)                upper emission limit
         NTC(r,rr)                       net transfer capacity from region r to region rr
         NUM(r,tec)                      installed capacity per technology in 100 MW slices
         OM_FIXED_COST(tec)              quasifixed cost of operation & maintenance
         OM_VARIABLE_COST(tec)           variable cost of operation & maintenance
         PRICE_DA(t)                     observed electricity price on day-ahead market [k EUR per GWh]
         PRICE_EUA(t)                    price of emission allowances [k EUR per kt CO2]
         PRICE_FUEL(t,f)                 price of fuel [k EUR per GWh]
         RESERVOIR_INFLOWS(r,t,tec_hsp)  inflows to reservoirs of hydro storage plants [GW]
         SWITCH_INVEST_THERM                switch for investment in thermal units
         SWITCH_INVEST_ITM                  switch for investment in intermittents
;
* starting and ending values for intra-year iterations
parameters
         FINAL_STORAGE(r,t,tec_hsp)      final reservoir filling level
         INIT_GEN(r,t,tec,prd)           initial generation at iteration start
         INIT_PUMP(r,t,tec_hsp)          initial pumping level
         INIT_STORAGE(r,t,tec_hsp)       initial reservoir filling level
         INIT_TURB(r,t,tec_hsp)          initial generation of hydro storage plant at iteration start
;
********************************************************************************
********** data instantiation
********************************************************************************
*$gdxin MEDEA_%scenario%_iterdata
*$load  t start_t end_t
*$gdxin

$if NOT exist medea_%scenario%_data.gdx  $gdxin medea_data
$if     exist medea_%scenario%_data.gdx  $gdxin medea_%scenario%_data
$load  t f l tec tec_chp tec_hsp tec_itm prd props r
$load  ANCIL_SERVICE_LVL CONSUMPTION EMISSION_INTENSITY EXPORT_FLOWS EFFICIENCY
$load  FEASIBLE_INPUT FEASIBLE_OUTPUT GEN_PROFILE HSP_PROPERTIES IMPORT_FLOWS
$load  INSTALLED_CAP_ITM INSTALLED_CAP_THERM INVESTCOST_ITM INVESTCOST_THERMAL
$load  NTC NUM OM_FIXED_COST OM_VARIABLE_COST PRICE_DA PRICE_EUA
$load  PRICE_FUEL RESERVOIR_INFLOWS SWITCH_INVEST_THERM SWITCH_INVEST_ITM
$gdxin

*$gdxin MEDEA_%scenario%_iterdata
*$load  INIT_GEN INIT_PUMP INIT_STORAGE INIT_TURB FINAL_STORAGE
*$gdxin

*EFFICIENCY(tec,f) = FEASIBLE_OUTPUT(tec,'l1','power')/FEASIBLE_INPUT(tec,'l1',f);
display EFFICIENCY;


********************************************************************************
********** variable declaration
********************************************************************************
variables
         cost                            total system cost (to be minimized)
         emissions                       total emissions from power generation
         flow(r,rr,t)                    electricity exchange flow [GW]
;
positive variables
         cc_weights(r,t,tec,l)           weights of co-generation convex combination
         cost_emission(r,t,tec)          emission cost
         cost_fuel(r,t,tec)              fuel cost
         cost_om(r,tec)                  operation & maintenance cost
         cost_invgen(r)                  cost of investment in generators
         decommission(r,tec)             plant decommissioning
         invest_res(r,tec_itm)           added capacity of intermittent technologies
         invest_thermal(r,tec)           thermal power plant investment
         q_curtail(r,t,prd)              unused renewable generation
         q_fueluse(r,t,tec,f)            fuel consumed
         q_gen(r,t,tec,prd)              energy generation
         q_nonserved(r,t,prd)            consumption for which there is no supply
         q_pump(r,t,tec_hsp)             electricity pumped (stored)
         q_turbine(r,t,tec_hsp)          electricity generation from hydro reservoirs
         res_level(r,t,tec_hsp)          energy stored in reservoir
;

********************************************************************************
******* equation declaration
********************************************************************************
equations
         objective                       total system cost calculation
         obj_fuelcost                    total fuel cost
         obj_emissioncost                total emission cost
         obj_omcost                      total O&M cost
         obj_invgencost                  total cost of investment in generators
         SD_balance_el                   supply-demand balance electricity
         SD_balance_ht                   supply-demand balance heat
         caplim_generation               capacity limit on thermal generators
         nonchp_generation               fuel requirement of non-CHPs
         cc_a                            CHP fuel-output combination must be convex
         cc_b                            feasible output combinations of CHPs
         cc_c                            feasible fuel requirement of CHPs
         caplim_hspgen                   generation limit of hydro storages
         caplim_pumping                  pumping limit of pumped storages
         caplim_reservoir                reservoir limit of hydro storages
         reservoir_balance               reservoir balance of hydro storages
         emission_calculation            total CO2 emissions from fuel combustion
         decommission_limit              only active plants can be decommissioned
         ancillary_service               must-run for provision of ancillary services
         flow_balance                    imports are exports from elsewhere
         flow_constraint_a               capacity restriction on exports
         flow_constraint_b               capacity restriction on imports
;

********************************************************************************
******* model equations
* ------------------------------------------------------------------------------
* OBJECTIVES
* ------------------------------------------------------------------------------
objective..
                                 cost
                                 =E=
                                 sum(r,
                                 sum((t,tec), cost_fuel(r,t,tec))
                                 + sum((t,tec), cost_emission(r,t,tec))
                                 + sum(tec, cost_om(r,tec))
                                 + cost_invgen(r)
                                 + 12500 * sum((t,prd), q_nonserved(r,t,prd))
                                 + 110 * sum((t,prd), q_curtail(r,t,prd)) )
                                 ;
obj_fuelcost(r,t,tec)..          cost_fuel(r,t,tec)
                                 =E=
                                 sum(f,PRICE_FUEL(t,f) * q_fueluse(r,t,tec,f))
                                 ;
obj_emissioncost(r,t,tec)..      cost_emission(r,t,tec)
                                 =E=
                                 sum(f, PRICE_EUA(t) * EMISSION_INTENSITY(f) * q_fueluse(r,t,tec,f))
                                 ;
obj_omcost(r,tec)..              cost_om(r,tec)
                                 =E=
                                 OM_FIXED_COST(tec) * (NUM(r,tec) - decommission(r,tec) + invest_thermal(r,tec))
                                 + sum((t,prd), OM_VARIABLE_COST(tec) * q_gen(r,t,tec,prd))
                                 ;
obj_invgencost(r)..              cost_invgen(r)
                                 =E=
                                 sum(tec, INVESTCOST_THERMAL(tec) * invest_thermal(r,tec))
                                 + sum(tec_itm, INVESTCOST_ITM(tec_itm) * invest_res(r,tec_itm))
                                 ;
* ------------------------------------------------------------------------------
* SUPPLY-DEMAND BALANCES
* ------------------------------------------------------------------------------
SD_balance_el(r,t)..
                                 sum(tec,q_gen(r,t,tec,'power'))
                                 + sum(tec_hsp, q_turbine(r,t,tec_hsp))
                                 + sum(tec_itm, GEN_PROFILE(r,t,tec_itm) * (INSTALLED_CAP_ITM(r,tec_itm) + invest_res(r,tec_itm)) )
                                 + IMPORT_FLOWS(r,t)
                                 - q_curtail(r,t,'power')
                                 + q_nonserved(r,t,'power')
                                 =E=
                                 CONSUMPTION(r,t,'power')
                                 + sum(tec_hsp, q_pump(r,t,tec_hsp))
                                 + EXPORT_FLOWS(r,t)
                                 + sum(rr, flow(r,rr,t) )
                                 ;
SD_balance_ht(r,t)..
                                 sum(tec,q_gen(r,t,tec,'heat'))
                                 + q_nonserved(r,t,'heat')
                                 =E=
                                 CONSUMPTION(r,t,'heat')
                                 ;
* ------------------------------------------------------------------------------
* THERMAL GENERATION
* ------------------------------------------------------------------------------
caplim_generation(r,t,tec,prd)..
                                 q_gen(r,t,tec,prd)
                                 =L=
                                 SMAX(l, FEASIBLE_OUTPUT(tec,l,prd)) * (NUM(r,tec) - decommission(r,tec) + invest_thermal(r,tec) )
                                 ;
nonchp_generation(r,t,tec)$(NOT tec_chp(tec))..
                                 sum(f, q_fueluse(r,t,tec,f)*EFFICIENCY(tec,'power',f) )
                                 =G=
                                 q_gen(r,t,tec,'power')
                                 ;
cc_a(r,t,tec)$tec_chp(tec)..
                                 Sum(l, cc_weights(r,t,tec,l))
                                 =E=
                                 (NUM(r,tec) - decommission(r,tec) + invest_thermal(r,tec) )
                                 ;
cc_b(r,t,tec,prd)$tec_chp(tec)..
                                 q_gen(r,t,tec,prd)
                                 =L=
                                 Sum(l, cc_weights(r,t,tec,l) * FEASIBLE_OUTPUT(tec,l,prd))
                                 ;
cc_c(r,t,tec,f)$tec_chp(tec)..
                                 q_fueluse(r,t,tec,f)
                                 =G=
                                 Sum(l, cc_weights(r,t,tec,l) * FEASIBLE_INPUT(tec,l,f) )
                                 ;
* ------------------------------------------------------------------------------
* HYDRO STORAGE GENERATION
* ------------------------------------------------------------------------------
caplim_hspgen(r,t,tec_hsp)..
                                 q_turbine(r,t,tec_hsp)
                                 =L=
                                 HSP_PROPERTIES(r,tec_hsp,'cap_turbine')
                                 ;
caplim_pumping(r,t,tec_hsp)..
                                 q_pump(r,t,tec_hsp)
                                 =L=
                                 HSP_PROPERTIES(r,tec_hsp,'cap_pump')
                                 ;
caplim_reservoir(r,t,tec_hsp)..
                                 res_level(r,t,tec_hsp)
                                 =L=
                                 HSP_PROPERTIES(r,tec_hsp,'cap_reservoir')
                                 ;
reservoir_balance(r,t,tec_hsp)$(ord(t) > 1 AND HSP_PROPERTIES(r,tec_hsp,'efficiency_turbine'))..
                                 res_level(r,t,tec_hsp) - res_level(r,t-1,tec_hsp)
                                 =E=
                                 RESERVOIR_INFLOWS(r,t,tec_hsp)
                                 + q_pump(r,t,tec_hsp) * HSP_PROPERTIES(r,tec_hsp,'efficiency_pump')
                                 - q_turbine(r,t,tec_hsp) / HSP_PROPERTIES(r,tec_hsp,'efficiency_turbine')
                                 ;
* ------------------------------------------------------------------------------
* international commercial electricity exchange
* ------------------------------------------------------------------------------
flow_balance(r,rr,t)$NTC(r,rr)..
                                 flow(r,rr,t)
                                 =E=
                                 -flow(rr,r,t)
                                 ;
flow_constraint_a(r,rr,t)$NTC(r,rr)..
                                 flow(r,rr,t)
                                 =L=
                                 NTC(r,rr)
                                 ;
flow_constraint_b(r,rr,t)$NTC(rr,r)..
                                 flow(rr,r,t)
                                 =L=
                                 NTC(rr,r)
                                 ;
* no flows from region to itself
flow.FX(r,rr,t)$(not NTC(r,rr))   = 0;
flow.FX(rr,r,t)$(not NTC(rr,r))   = 0;
* ------------------------------------------------------------------------------
* emissions
* ------------------------------------------------------------------------------
emission_calculation..
                                 emissions
                                 =E=
                                 sum((r,t,f), EMISSION_INTENSITY(f) * sum(tec,q_fueluse(r,t,tec,f)))
                                 ;
* ------------------------------------------------------------------------------
* decommissioning
* ------------------------------------------------------------------------------
decommission_limit(r,tec)..
                                 decommission(r,tec)
                                 =L=
                                 NUM(r,tec) + invest_thermal(r,tec)
                                 ;
* ------------------------------------------------------------------------------
* ancillary services
* ------------------------------------------------------------------------------
ancillary_service(r,t)..
                                 sum(tec$(NOT tec_chp(tec)), q_gen(r,t,tec,'power'))
                                 + sum(tec_hsp, q_turbine(r,t,tec_hsp))
                                 + sum(tec_hsp, q_pump(r,t,tec_hsp))
                                 =G=
                                 ANCIL_SERVICE_LVL(r)
                                 ;
* ------------------------------------------------------------------------------
* switches for long-term vs short-term model version
* ------------------------------------------------------------------------------
invest_thermal.UP(r,tec) =       SWITCH_INVEST_THERM;
decommission.UP(r,tec) =         SWITCH_INVEST_THERM;
invest_res.UP(r,tec_itm) =       SWITCH_INVEST_ITM;
invest_res.FX(r,'ror') =         0;

model medea / all /;

********************************************************************************
******* set starting values
*q_gen.FX(r,start_t,tec,prd)      $INIT_GEN(r,start_t,tec,prd)            = INIT_GEN(r,start_t,tec,prd);
*q_pump.FX(r,start_t,tec_hsp)     $INIT_PUMP(r,start_t,tec_hsp)           = INIT_PUMP(r,start_t,tec_hsp);
*q_turbine.FX(r,start_t,tec_hsp)  $INIT_TURB(r,start_t,tec_hsp)           = INIT_TURB(r,start_t,tec_hsp);
*res_level.FX(r,start_t,tec_hsp)  $INIT_STORAGE(r,start_t,tec_hsp)        = INIT_STORAGE(r,start_t,tec_hsp);
*res_level.FX(r,end_t,tec_hsp)    $FINAL_STORAGE(r,end_t,tec_hsp)         = FINAL_STORAGE(r,end_t,tec_hsp);


options
LP = Gurobi,
reslim = 3600,
threads = 8,
optCR = 0.01,
BRatio = 1
;

solve medea using LP minimizing cost;

scalars modelStat, solveStat;
modelStat = medea.modelstat;
solveStat = medea.solvestat;


$ontext
set scen_emilim / s1 /;
parameter results_emilim(*,*);
results_emilim('s1', 'cost') = cost.L;
results_emilim('s1', 'emissions') = emissions.L;
results_emilim('s1', 'Emi_cost') = sum((r,t,tec), cost_emission.L(r,t,tec));

file output_emilim / results_eua160.csv /;
put output_emilim;
loop(scen_emilim,
         put scen_emilim.TL, ";", results_emilim(scen_emilim, 'cost'), ";", results_emilim(scen_emilim, 'Emissions'), ";", results_emilim(scen_emilim, 'Emi_cost') / );
putclose

emissions.UP = 147996.58;

solve medea using LP minimizing emissions;
set scen_emieua / s1 /;
parameter results_emieua(*,*);
results_emieua('s1', 'cost') = cost.L;
results_emieua('s1', 'emissions') = emissions.L;

file output_emieua / results_emieua.csv /;
put output_emieua;
loop(scen_emieua,
         put scen_emieua.TL, ";", results_emieua(scen_emieua, 'cost'), ";", results_emieua(scen_emieua, 'Emissions'), ";", results_emilim(scen_emieua, 'Emi_cost') / );
putclose

set s scenarios / s1*s3 /
parameter results_loop(*,*);
loop(s,
         emissions.UP = 110000 - ord(s) * 20000;
         solve medea using LP minimizing cost;
         results_loop(s, 'cost') = Cost.L;
         results_loop(s, 'Emissions') = emissions.L;
         results_loop(s, 'Emi_cost') = sum((r,t,tec), cost_emission.L(r,t,tec));
)

file output / results_multiobj2.csv /;
put output;
loop(s,
         put s.TL, ";", results_loop(s, 'cost'), ";", results_loop(s, 'Emissions'), ";", results_loop(s, 'Emi_cost') / );
putclose
$offtext
